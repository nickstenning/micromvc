/* automatically generated by JSCoverage - do not edit */
if (! top._$jscoverage) {
  top._$jscoverage = {};
}
var _$jscoverage = top._$jscoverage;
if (! _$jscoverage['lib/model.js']) {
  _$jscoverage['lib/model.js'] = [];
  _$jscoverage['lib/model.js'][1] = 0;
  _$jscoverage['lib/model.js'][14] = 0;
  _$jscoverage['lib/model.js'][15] = 0;
  _$jscoverage['lib/model.js'][16] = 0;
  _$jscoverage['lib/model.js'][17] = 0;
  _$jscoverage['lib/model.js'][20] = 0;
  _$jscoverage['lib/model.js'][23] = 0;
  _$jscoverage['lib/model.js'][26] = 0;
  _$jscoverage['lib/model.js'][29] = 0;
  _$jscoverage['lib/model.js'][32] = 0;
  _$jscoverage['lib/model.js'][35] = 0;
  _$jscoverage['lib/model.js'][36] = 0;
  _$jscoverage['lib/model.js'][47] = 0;
  _$jscoverage['lib/model.js'][50] = 0;
  _$jscoverage['lib/model.js'][55] = 0;
  _$jscoverage['lib/model.js'][57] = 0;
  _$jscoverage['lib/model.js'][59] = 0;
  _$jscoverage['lib/model.js'][60] = 0;
  _$jscoverage['lib/model.js'][63] = 0;
  _$jscoverage['lib/model.js'][65] = 0;
  _$jscoverage['lib/model.js'][69] = 0;
  _$jscoverage['lib/model.js'][70] = 0;
  _$jscoverage['lib/model.js'][71] = 0;
  _$jscoverage['lib/model.js'][74] = 0;
  _$jscoverage['lib/model.js'][75] = 0;
  _$jscoverage['lib/model.js'][78] = 0;
  _$jscoverage['lib/model.js'][79] = 0;
  _$jscoverage['lib/model.js'][81] = 0;
  _$jscoverage['lib/model.js'][84] = 0;
}
_$jscoverage['lib/model.js'][1]++;
var Model = new Class({Implements: [Options, Events], options: {baseurl: "/api/rest", name: "dummy", events: {}}, initialize: function(options) {
  _$jscoverage['lib/model.js'][14]++;
  this.setOptions(options);
  _$jscoverage['lib/model.js'][15]++;
  this.registry = [];
  _$jscoverage['lib/model.js'][16]++;
  this.entities = new Hash();
  _$jscoverage['lib/model.js'][17]++;
  this.addEvents(this.options.events);
}
, registerGet: function() {
  _$jscoverage['lib/model.js'][20]++;
  this.request("get").send();
}
, registerPost: function(entity) {
  _$jscoverage['lib/model.js'][23]++;
  this.request("post").send(entity);
}
, entityGet: function(id) {
  _$jscoverage['lib/model.js'][26]++;
  this.request("get", id).send();
}
, entityPut: function(id, entity) {
  _$jscoverage['lib/model.js'][29]++;
  this.request("put", id).send(entity);
}
, entityDelete: function(id) {
  _$jscoverage['lib/model.js'][32]++;
  this.request("delete", id).send();
}
, request: function(reqMethod, id) {
  _$jscoverage['lib/model.js'][35]++;
  var reqUrl = [this.options.baseurl, this.options.name, id].clean().join("/");
  _$jscoverage['lib/model.js'][36]++;
  return new Request.JSON({method: reqMethod, url: reqUrl, secure: true, emulation: false, onRequest: this.fireEvent.bind(this, ["requestSent"]), onComplete: this.fireEvent.bind(this, ["requestCompleted"]), onSuccess: (function(responseObject, responseText) {
  _$jscoverage['lib/model.js'][47]++;
  this.requestSuccessCallback(reqMethod, id, responseObject, responseText);
}
).bind(this), onFailure: (function(responseObject, responseText) {
  _$jscoverage['lib/model.js'][50]++;
  this.requestFailureCallback(reqMethod, id, responseObject, responseText);
}
).bind(this)});
}
, requestSuccessCallback: function(reqMethod, id, responseObject, responseText) {
  _$jscoverage['lib/model.js'][55]++;
  switch (reqMethod) {
  case "get":
    _$jscoverage['lib/model.js'][57]++;
    if (id !== null && id !== undefined) {
      _$jscoverage['lib/model.js'][59]++;
      this.registry.include(id);
      _$jscoverage['lib/model.js'][60]++;
      this.entities[id] = responseObject;
    }
    else {
      _$jscoverage['lib/model.js'][63]++;
      this.registry = responseObject;
    }
    _$jscoverage['lib/model.js'][65]++;
    break;
  case "post":
    _$jscoverage['lib/model.js'][69]++;
    this.registry.include(responseObject.id);
    _$jscoverage['lib/model.js'][70]++;
    this.entities[responseObject.id] = responseObject;
    _$jscoverage['lib/model.js'][71]++;
    break;
  case "put":
    _$jscoverage['lib/model.js'][74]++;
    this.entities[id] = responseObject;
    _$jscoverage['lib/model.js'][75]++;
    break;
  case "delete":
    _$jscoverage['lib/model.js'][78]++;
    this.registry.erase(id);
    _$jscoverage['lib/model.js'][79]++;
    this.entities.erase(id);
  }
  _$jscoverage['lib/model.js'][81]++;
  this.fireEvent("requestSuccess");
}
, requestFailureCallback: function(methodUsed, id, responseObject, responseText) {
  _$jscoverage['lib/model.js'][84]++;
  this.fireEvent("requestFailure");
}
});
